[remote.github]
owner = "Dufran"
repo = "homepage"

[changelog]

body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }}\
        {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif %} in\
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{%- endif %}

"""

# Remove leading and trailing whitespaces from the changelog's body.
trim = true
[git]
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
  {message = "^feat", group = "<!-- 0 -->⛰️  Features"},
  {message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes"},
  {message = "^doc", group = "<!-- 3 -->📚 Documentation"},
  {message = "^perf", group = "<!-- 4 -->⚡ Performance"},
  {message = "^refactor\\(clippy\\)", skip = true},
  {message = "^refactor", group = "<!-- 2 -->🚜 Refactor"},
  {message = "^style", group = "<!-- 5 -->🎨 Styling"},
  {message = "^test", group = "<!-- 6 -->🧪 Testing"},
  {message = "^chore\\(release\\): prepare for", skip = true},
  {message = "^chore\\(deps.*\\)", skip = true},
  {message = "^chore\\(pr\\)", skip = true},
  {message = "^chore\\(pull\\)", skip = true},
  {message = "^chore\\(npm\\).*yarn\\.lock", skip = true},
  {message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks"},
  {body = ".*security", group = "<!-- 8 -->🛡️ Security"},
  {message = "^revert", group = "<!-- 9 -->◀️ Revert"},
]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# Exclude commits that are not matched by any commit parser.
filter_commits = true
# Regex to select git tags that represent releases.
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"
